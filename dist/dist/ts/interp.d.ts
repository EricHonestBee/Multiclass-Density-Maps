import * as Configuration from './configuration';
import DataBuffer from './data-buffer';
import DerivedBuffer from './derived-buffer';
import Image from './image';
import Tile, { TileAggregation } from './tile';
import Color from './color';
import * as Scale from './scale';
import Mask from './mask';
export default class Interpreter {
    configuration: Configuration.Configuration;
    debug: boolean;
    description?: string;
    width: number;
    height: number;
    n: number;
    sourceBuffers: DataBuffer[];
    dataBuffers: DataBuffer[];
    dataSpec: Configuration.DataSpec;
    derivedBuffers: DerivedBuffer[];
    blurredBuffers: DerivedBuffer[];
    image: Image[];
    tiles: Tile[];
    tileAggregation: TileAggregation;
    strokeCanvas: boolean;
    backgroundStroke: string;
    fillCanvas: boolean;
    background?: string;
    bufferNames: string[];
    colors0: Color[];
    colors1: Color[];
    rebin: any;
    rescale: Configuration.RescaleSpec;
    compose: Configuration.ComposeSpec;
    composer: (buffers: DerivedBuffer[], values: number[]) => Color;
    masks: Mask[];
    maskStroke?: string;
    contour: Configuration.ContourSpec;
    blur: number;
    geo: Configuration.GeoSpec;
    legend: Configuration.LegendSpec | false;
    scale: Scale.ScaleTrait;
    xdomain: Configuration.NumPair;
    ydomain: Configuration.NumPair;
    stroke?: Configuration.StrokeSpec;
    axis?: Configuration.AxisSpec;
    d3scale: string;
    d3base: number;
    d3exponent: number;
    constructor(configuration: Configuration.Configuration, debug?: boolean);
    log(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    interpret(context?: {}): void;
    private computeDerivedBuffers(context?);
    private computeRebin(context?);
    private computeCompose(context?);
    private setup(canvas, width, height);
    private renderMap(canvas, wrapper, width, height);
    render(id: string | HTMLDivElement, forcedWidth?: number, forcedHeight?: number): void;
    private renderAxis(map, native, forcedWidth?, forcedHeight?);
    private renderStroke(canvas);
    pickDomains(x: number, y: number): [number, number] | null;
    pickValues(x: number, y: number): number[];
    pickTile(x: number, y: number): Tile | null;
}
