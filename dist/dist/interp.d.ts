import * as Parser from './parser';
import DataBuffer from './data-buffer';
import DerivedBuffer from './derived-buffer';
import Image from './image';
import Tile, { TileAggregation } from './tile';
import Color from './color';
import * as Scale from './scale';
import Mask from './mask';
export default class Interpreter {
    configuration: Parser.Configuration;
    description?: string;
    width: number;
    height: number;
    n: number;
    sourceBuffers: DataBuffer[];
    dataBuffers: DataBuffer[];
    derivedBuffers: DerivedBuffer[];
    blurredBuffers: DerivedBuffer[];
    image: Image[];
    tiles: Tile[];
    tileAggregation: TileAggregation;
    strokeCanvas: boolean;
    backgroundStroke: string;
    fillCanvas: boolean;
    background?: string;
    bufferNames: string[];
    colors: Color[];
    labels?: string[];
    rebin: any;
    rescale: Parser.RescaleSpec;
    compose: Parser.ComposeSpec;
    composer: (buffers: DerivedBuffer[], values: number[]) => Color;
    masks: Mask[];
    maskStroke?: string;
    contour: Parser.ContourSpec;
    blur: number;
    geo: Parser.GeoSpec;
    legend: Parser.LegendSpec | false;
    scale: Scale.ScaleTrait;
    d3scale: string;
    d3base: number;
    constructor(configuration: Parser.Configuration);
    interpret(context?: {}): void;
    private computeDerivedBuffers(context?);
    private computeRebin(context?);
    private computeCompose(context?);
    setup(id: string | HTMLCanvasElement): void;
    render(id: string | HTMLCanvasElement): void;
    renderLegend(id: string): void;
}
